<?xml version="1.0" encoding="utf-8"?>
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" 
	width="100%" height="100%" title="Outline" backgroundAlpha="0.5" borderStyle="solid" borderThickness="1" borderColor="#646464" fontSize="12">
	<mx:Script>
		<![CDATA[
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import org.literacybridge.authoring.schema.ContentContainer;
			import mx.resources.ResourceManager;
			import mx.controls.treeClasses.TreeItemRenderer;
			import mx.core.UITextField;
			import mx.containers.TitleWindow;
			
			import org.literacybridge.authoring.schema.SubBlockAppendable;
			import mx.managers.PopUpManager;
			import org.literacybridge.authoring.schema.ContentXMLParser;
			import org.literacybridge.authoring.schema.ContentBlock;
			import org.literacybridge.authoring.schema.ContentFile;
			import mx.collections.ArrayCollection;
			import org.literacybridge.authoring.schema.ContentPackage;
			
			[Bindable]
			public var contents:ArrayCollection = new ArrayCollection();
			
			private function onRightClick(event:MouseEvent):void {
				var item:Object = event.target;
				// this is a hack - once we have our own TreeItemRenderers for the outline tree,
				// we can attach use it for dispatching the right-click event
				if (!item.hasOwnProperty("owner")) return;
				item = item.owner;
				if (!item.hasOwnProperty("data")) return;
				item = item.data;
				
				if (item != null) {
					
					// sound file
					if (item is ContentFile) {
						var contextSubBlockMenu:ContextMenu = new ContextMenu();
						// add block
						var add_SubBlockmenuItem:ContextMenuItem = new ContextMenuItem(resourceManager.getString('resources', 'ADD_NEW_BLOCK'));
						add_SubBlockmenuItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onAddNewBlock);
						add_SubBlockmenuItem.data = item as ContentContainer;
						// remove sound file ITSELF !
						var remove_SoundFilemenuItem:ContextMenuItem = new ContextMenuItem(resourceManager.getString('resources', 'REMOVE_SOUND_FILE'));
						remove_SoundFilemenuItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onDeleteFile);
						remove_SoundFilemenuItem.data = item as ContentFile;
						
						contextSubBlockMenu.addItem(add_SubBlockmenuItem);
						contextSubBlockMenu.addItem(remove_SoundFilemenuItem);
						contextSubBlockMenu.display(this.stage, event.stageX, event.stageY);
						
					// package	
					} else if (item is ContentPackage) {
						var contextContentPackageMenu:ContextMenu = new ContextMenu();
						var add_ContentPackagemenuItem:ContextMenuItem = new ContextMenuItem(resourceManager.getString('resources', 'ADD_NEW_SOUND_FILE'));
						add_ContentPackagemenuItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onAddNewfile);
						add_ContentPackagemenuItem.data = item as ContentPackage;
						contextContentPackageMenu.addItem(add_ContentPackagemenuItem);
						contextContentPackageMenu.display(this.stage, event.stageX, event.stageY);
						
					// block
					} else if (item is ContentBlock) {
						var contextContentBlockMenu:ContextMenu = new ContextMenu();
						
						var add_ContentBlockmenuItem:ContextMenuItem = new ContextMenuItem(resourceManager.getString('resources', 'ADD_NEW_SUBBLOCK'));
						add_ContentBlockmenuItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onAddNewBlock);
						add_ContentBlockmenuItem.data = item as ContentBlock;
						
						var remove_ContentBlockmenuItem:ContextMenuItem = new ContextMenuItem(resourceManager.getString('resources', 'REMOVE_BLOCK'));
						remove_ContentBlockmenuItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onDeleteBlock);
						remove_ContentBlockmenuItem.data = item as ContentBlock;
						
						contextContentBlockMenu.addItem(add_ContentBlockmenuItem);
						contextContentBlockMenu.addItem(remove_ContentBlockmenuItem);
						contextContentBlockMenu.display(this.stage, event.stageX, event.stageY);
					}
				}					
			}
			
			private function userConfirm(object:Object, parentUI:Sprite):void {
				var text:String;
				var objectType:String;
				var name:String = (object as ContentContainer).label;
				
				if (object is ContentFile) {
					objectType = 'the file';
				} else if (object is ContentBlock) {
					objectType = 'the block';
				} else {
					objectType = '';
				}
				text = "Do you really want to remove " + objectType + " '" + name + "'?";

               	var box:Alert = Alert.show(text, "Remove Event", Alert.YES + Alert.NO, parentUI, removeEventHandler, null, Alert.NO);
               	box.data = object;		
			}
			
		    private function removeEventHandler(event:CloseEvent):void {
                if (event.detail==Alert.YES) {
					if (event.target is Alert) {
						var alertBox:Alert = event.target as Alert;
						if (alertBox.data is ContentFile) {
							deleteFile(alertBox.data as ContentFile);
						} else if (alertBox.data is ContentBlock){
							deleteBlock(alertBox.data as ContentBlock);
						}
					}	
                }
            }
			
			private function deleteFile(file:ContentFile):void {
				var parent:ContentContainer = file.parent;
				if (parent != null) {
					var index:int = parent.children.getItemIndex(file);
					parent.children.removeItemAt(index);
				}
			}
			
			private function deleteBlock(block:ContentBlock):void {
				var parent:ContentContainer = block.parent;
				if (parent != null) {
					var index:int = parent.children.getItemIndex(block);
					parent.children.removeItemAt(index);
				}
			}
			
			private function onAddNewfile(event:ContextMenuEvent):void {
				var addFile:AddFile = AddFile(PopUpManager.createPopUp(this, AddFile, true));
				if (event.target.data != null && event.target.data is ContentPackage) {
					addFile.parentContainer = event.target.data as ContentPackage;
				} else {
					trace ("Data object is null or not a 'ContentPackage'.");
				}				
				// remove listener
				var cmi:ContextMenuItem = event.target as ContextMenuItem;
				cmi.removeEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onAddNewfile);
			}
			
			private function onDeleteFile(event:ContextMenuEvent):void {
				if (event.target.data != null && event.target.data is ContentFile) {
					var cpToDelete:ContentFile = event.target.data as ContentFile;
					userConfirm(cpToDelete, event.target as Sprite);	// ask user before deleting				
				} else {
					trace ("Data object is null or not a 'ContentPackage'.");
				}				
				// remove listener
				var cmi:ContextMenuItem = event.target as ContextMenuItem;
				cmi.removeEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onDeleteFile);			
			}
			
			private function onAddNewBlock(event:ContextMenuEvent):void {
				var addBlock:AddBlock = AddBlock(PopUpManager.createPopUp(this, AddBlock, true));
				if (event.target.data != null && event.target.data is SubBlockAppendable) {
					addBlock.parentContainer = event.target.data as SubBlockAppendable;
				} else {
					trace ("Data object is null or not a 'SubBlockAppendable'.");
				}
			}
			
			private function onDeleteBlock(event:ContextMenuEvent):void {
				if (event.target.data != null && event.target.data is ContentBlock) {
					var cbToDelete:ContentBlock = event.target.data as ContentBlock;
					userConfirm(cbToDelete, event.target as Sprite); // ask user before deleting						
				} else {
					trace ("Data object is null or not a 'ContentPackage'.");
				}				
				// remove listener
				var cmi:ContextMenuItem = event.target as ContextMenuItem;
				cmi.removeEventListener(ContextMenuEvent.MENU_ITEM_SELECT, onDeleteFile);					
			}
			
		]]>
	</mx:Script>
	
	<mx:VBox width="100%" height="100%">
		<mx:Tree id="outlineTree" dataProvider="{contents}" width="100%" alpha="1.0" height="100%"
			rightClick="onRightClick(event)"/>
	</mx:VBox>
</mx:Panel>
