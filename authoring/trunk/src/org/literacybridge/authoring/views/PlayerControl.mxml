<?xml version="1.0" encoding="utf-8"?>
<mx:Box width="100%" xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="initControl()" xmlns:views="org.literacybridge.authoring.views.*" xmlns:waveform="org.literacybridge.authoring.views.waveform.*">
	<mx:Script>
		<![CDATA[
			import org.literacybridge.authoring.views.waveform.WaveFormPosition;
			import org.literacybridge.authoring.player.PlayerStates;
			import org.literacybridge.authoring.player.PlayerController;
			import mx.formatters.Formatter;
			import mx.formatters.NumberBase;
			import mx.events.SliderEvent;
			import mx.states.State;
			import mx.events.StateChangeEvent;
			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;
			import org.literacybridge.authoring.player.Player;
		
			internal var playerController:PlayerController = null;
			internal var player:Player = null;
			
			internal var _positionWatcher:ChangeWatcher     = null;
			internal var _playerStateWatcher:ChangeWatcher 	= null;
			
			public var position:WaveFormPosition;
			private var audio:Sound;

			public function init(audio:Sound):void 
			{
				this.audio = audio;
	         	player = new Player();
	         	player.init(audio);	         	
	         	playerController = new PlayerController(player);	         	
	         	player.addEventListener(Player.PLAYER_FINISHED, onPlayerFinished);
 				enabelControls(true);
				if (player != null && playerController)
				{
					_playerStateWatcher = BindingUtils.bindSetter(playerStateChanged, player, "state");
	        		//_positionWatcher = BindingUtils.bindSetter(channelPositionChanged, position, "pos");
	        		_positionWatcher = BindingUtils.bindSetter(channelPositionChanged, playerController, "currentPlayerPosition");
				}
	        }
	        
	     	private function onPlayerFinished(event:Event):void
			{
				resetPlayerControl();
			}
	     			
			private function play():void 
			{
				if (playerController != null)
				{
					if (player.state == PlayerStates.PLAYER_RUNNING) 
					{
						playerController.pausePlayer();
					}
					else
					{
						playerController.startPlayer(position.pos);	
					}
				}
			}
			
			private function stop():void 
			{
				if (playerController != null)	
				{
					playerController.stopPlayer();
				}
			}
			
			private function resetPlayerControl():void 
			{
				position.pos = 0;
			}
				
	      	private function playerStateChanged(arg:*):void
	      	 {
	      	 	if (player == null) return;
				if (player.state == PlayerStates.PLAYER_RUNNING)
				{
					playBtn.label = resourceManager.getString('resources', 'PLAYERCONTROL_PAUSE_LABEL');
				}
				else if (player.state == PlayerStates.PLAYER_PAUSING
						|| player.state == PlayerStates.PLAYER_STOPPED)
				{
					playBtn.label = resourceManager.getString('resources', 'PLAYERCONTROL_PLAY_LABEL');
					if (player.state == PlayerStates.PLAYER_STOPPED)
					{
						resetPlayerControl();
					}		
				}
			}
	       
	        private function channelPositionChanged(arg:*):void 
	        {
	        	if (playerController != null && player != null && player.state == PlayerStates.PLAYER_RUNNING) 
	        	{
		        	position.pos = player.currentPosition;	        	
	        	}
	        }
			
			private function initControl():void 
			{
				position.pos = 0;
				enabelControls(false);
				//playerPositionSliderID.addEventListener(SliderEvent.THUMB_PRESS, onSliderThumbPressed); 
				//playerPositionSliderID.addEventListener(SliderEvent.THUMB_RELEASE, onSliderThumbReleased);
			}
	
			private function enabelControls(enable:Boolean):void 
			{
				playBtn.enabled = enable;
				stopBtn.enabled = enable;
//				if (playerController != null) 
//				{
//					playerPositionSliderID.enabled = playerController.isInitialized();
//				}
//				else 
//				{
//					playerPositionSliderID.enabled = false;
//				}
			}
			
	
			public function setCurrentSoundPos():void 
			{
				if (player.state == PlayerStates.PLAYER_RUNNING) {
					playerController.startPlayer(position.pos);
				}
			}		
			private function onSliderThumbPressed(event:Event):void 
			{
				detachPosWatching();
			}		
			private function onSliderThumbReleased(event:Event):void 
			{
				reattachPosWatching();	
			}
			public function reattachPosWatching():void
			{
				if (_positionWatcher != null && !_positionWatcher.isWatching())
				{
					_positionWatcher.reset(playerController);
				}
			}			
			public function detachPosWatching():void
			{
				if (_positionWatcher != null && _positionWatcher.isWatching())	
				{
					_positionWatcher.unwatch();
				}
			}	
				
			private function setPositionInMilliSecs(value:Number=-1):void 
			{
				position.pos=value;	
			}
			
			
			// Method for updating blocks in the player display
//			public function updateWaveform(data:Object):void {
//				waveformContainer.updateWaveform(data);
//			}
		]]>
	</mx:Script>
	

	
	<mx:HBox width="100%" height="100%">
		<mx:Button label="{resourceManager.getString('resources', 'PLAYERCONTROL_PLAY_LABEL')}" id="playBtn" click="play()" />
		<mx:Button label="{resourceManager.getString('resources', 'PLAYERCONTROL_STOP_LABEL')}" id="stopBtn"  click="stop()" />
		<!--<views:SoundPositionControl id="soundPositionCtrlID" visible="false"/>	-->
	</mx:HBox>
</mx:Box>
