<?xml version="1.0" encoding="utf-8"?>
<mx:Panel width="100%" xmlns:mx="http://www.adobe.com/2006/mxml" creationComplete="initControl()" xmlns:views="org.literacybridge.authoring.views.*" backgroundAlpha="0.5" borderStyle="solid" borderThickness="1" borderColor="#646464">
	<mx:Script>
		<![CDATA[
			import org.literacybridge.authoring.player.PlayerStates;
			import org.literacybridge.authoring.player.PlayerController;
			import mx.formatters.Formatter;
			import mx.formatters.NumberBase;
			import mx.events.SliderEvent;
			import mx.states.State;
			import mx.events.StateChangeEvent;
			import mx.binding.utils.BindingUtils;
			import mx.binding.utils.ChangeWatcher;
			import org.literacybridge.authoring.player.Player;
		
			internal var playerController:PlayerController = null;
			internal var player:Player = null;
			
			internal var _positionWatcher:ChangeWatcher     = null;
			internal var _playerStateWatcher:ChangeWatcher 	= null;
			
			internal var file:File;
			internal var filePath:String;


			/*
			 * File Browser 
			 */
			private function openFileBrowser():void 
			{
	            file = new File();  
				var mp3Filter:FileFilter = new FileFilter("MP3", "*.mp3")		
				file.addEventListener(Event.SELECT, onFileSelect);
				var dialogTitle:String = resourceManager.getString('resources', 'PLAYERCONTROL_FILE_BROWSER_TITLE');
				try 
				{
					file.browseForOpen(dialogTitle, ([mp3Filter]));	
				} 
				catch (err:Error)	
				{
					trace("Something went wrong browsing for a file");
				}
			}

			private function onFileSelect(event:Event):void 
			{
	         	var openedFile:File = event.target as File;
	         	filePath = openedFile.url;
	         	soundFilePathComboBox.text = filePath;
	         	file.removeEventListener(Event.COMPLETE, onFileSelect);

	         	player = new Player();
	         	player.init(filePath);	         	
	         	playerController = new PlayerController(player);	         	
	         	player.addEventListener(Player.PLAYER_INITIALIZED, fileLoadingComplete);
	         	player.addEventListener(Player.PLAYER_FINISHED, onPlayerFinished);
	        }
	        
	        private function fileLoadingComplete(event:Event):void 
	        {
	        	initPositionSlider();
	         	enabelControls(true);
				if (player != null && playerController)
				{
					_playerStateWatcher = BindingUtils.bindSetter(playerStateChanged, player, "state");
	        		_positionWatcher = BindingUtils.bindSetter(channelPositionChanged, playerController, "currentPlayerPosition");
				}
	        	player.removeEventListener(Player.PLAYER_INITIALIZED, fileLoadingComplete);
	        }
	     		
	     	private function onPlayerFinished(event:Event):void
			{
				resetPlayerControl();
			}
	     			
			private function play():void 
			{
				if (playerController != null)
				{
					if (player.state == PlayerStates.PLAYER_RUNNING) 
					{
						playerController.pausePlayer();
					}
					else
					{
						playerController.startPlayer();	
					}
				}
			}
			
			private function stop():void 
			{
				if (playerController != null)	
				{
					playerController.stopPlayer();
				}
			}
			
			private function resetPlayerControl():void 
			{
				playerPositionSliderID.value = 0;
				soundPositionCtrlID.setPositionInMilliSecs(0);
			}
				
	      	private function playerStateChanged(arg:*):void
	      	 {
	      	 	if (player == null) return;
				if (player.state == PlayerStates.PLAYER_RUNNING)
				{
					playBtn.label = resourceManager.getString('resources', 'PLAYERCONTROL_PAUSE_LABEL');
				}
				else if (player.state == PlayerStates.PLAYER_PAUSING
						|| player.state == PlayerStates.PLAYER_STOPPED)
				{
					playBtn.label = resourceManager.getString('resources', 'PLAYERCONTROL_PLAY_LABEL');
					if (player.state == PlayerStates.PLAYER_STOPPED)
					{
						resetPlayerControl();
					}		
				}
			}
	       
	        private function channelPositionChanged(arg:*):void 
	        {
	        	if (playerController != null && player != null && player.state == PlayerStates.PLAYER_RUNNING) 
	        	{
		        	var currentChannelPosition:Number = player.currentPosition;	        	
		        	playerPositionSliderID.value = currentChannelPosition / 1000;
		        	soundPositionCtrlID.setPositionInMilliSecs(currentChannelPosition);
	        	}
	        }
			
			private function initControl():void 
			{
				playerPositionSliderID.value = 0;
				enabelControls(false);
				soundFilePathComboBox.enabled = false;	// always insensitive
				playerPositionSliderID.addEventListener(SliderEvent.THUMB_PRESS, onSliderThumbPressed); 
				playerPositionSliderID.addEventListener(SliderEvent.THUMB_RELEASE, onSliderThumbReleased);
			}
	
			private function enabelControls(enable:Boolean):void 
			{
				playBtn.enabled = enable;
				stopBtn.enabled = enable;
				if (playerController != null) 
				{
					playerPositionSliderID.enabled = playerController.isInitialized();
				}
				else 
				{
					playerPositionSliderID.enabled = false;
				}
			}
			
	
			/*
			 * Position Slider ...
			 */ 
			private function initPositionSlider():void 
	        {
	        	if (player != null && player.isInitialized()) 
	        	{
	        		var soundLength:Number = player.soundLength/1000;
	        		playerPositionSliderID.value = 0;
	        		playerPositionSliderID.maximum = soundLength.valueOf();
	        	}
	        }
			private function getCurrentSoundPos():void 
			{
				playerController.startPlayer(playerPositionSliderID.value*1000);
			}		
			private function onSliderThumbPressed(event:Event):void 
			{
				detachPosWatching();
			}		
			private function onSliderThumbReleased(event:Event):void 
			{
				reattachPosWatching();	
			}
			private function reattachPosWatching():void
			{
				if (_positionWatcher != null && !_positionWatcher.isWatching())
				{
					_positionWatcher.reset(playerController);
				}
			}			
			private function detachPosWatching():void
			{
				if (_positionWatcher != null && _positionWatcher.isWatching())	
				{
					_positionWatcher.unwatch();
				}
			}	
				
			private function setPositionInMilliSecs(value:Number=-1):void 
			{
				soundPositionCtrlID.setPositionInMilliSecs(value);	
			}
			
		]]>
	</mx:Script>

	<mx:HBox width="100%" height="100%">
		<mx:Button label="{resourceManager.getString('resources', 'PLAYERCONTROL_PLAY_LABEL')}" id="playBtn" click="play()" />
		<mx:Button label="{resourceManager.getString('resources', 'PLAYERCONTROL_STOP_LABEL')}" id="stopBtn"  click="stop()" />
		<views:SoundPositionControl id="soundPositionCtrlID"/>	
	</mx:HBox>
	<mx:HBox width="100%" height="100%">
		<mx:Label text="Position:"/>
			<mx:HSlider width="100%" 
					minimum="0" 
					maximum="100" 
					value="0" 
					change="getCurrentSoundPos()" 
					id="playerPositionSliderID"/> 
	</mx:HBox>	
	<mx:HBox width="100%" height="100%">
		<mx:TextInput width="100%" id="soundFilePathComboBox"/>
		<mx:Button label="{resourceManager.getString('resources', 'PLAYERCONTROL_FILE_OPEN_BUTTON')}" id="setBtn"  click="openFileBrowser()" />
	</mx:HBox>
</mx:Panel>
