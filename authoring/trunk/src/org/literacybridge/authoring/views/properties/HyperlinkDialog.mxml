<?xml version="1.0" encoding="utf-8"?>
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" 
			borderStyle="solid" borderColor="#646464" borderThickness="1"
			title="New Hyperlink"
			initialize="init()"
			close="close()" showCloseButton="true"
			fontSize="12">
	
	
	<mx:states>
		<mx:State name="CallBlockState">
			<mx:AddChild position="after" relativeTo="{endPosBox}">
				<mx:HBox>				
					<mx:Label id="returnRewindSecondsLabel"  text="Return rewind seconds:" height="22" width="169"/>
					<mx:TextInput id="returnRewindSecondsTextInput" restrict="0123456789" width="79"/>
				</mx:HBox>
			</mx:AddChild>
			<mx:SetProperty name="height" value="100%"/>
			<mx:SetProperty target="{mainBox}" name="height" value="100%"/>
		</mx:State>
	</mx:states>
	
<mx:Script>
	<![CDATA[
		import mx.controls.Alert;
		import org.literacybridge.authoring.schema.helper.HyperlinkChecker;
		import org.literacybridge.authoring.schema.helper.HyperlinkNameVisitor;
		import mx.managers.PopUpManager;
		import org.literacybridge.authoring.schema.actions.CallBlockAction;
		import com.asfusion.mate.actions.CallBack;
		import org.literacybridge.authoring.schema.actions.GotoAction;
		import org.literacybridge.authoring.schema.ContentFile;
		import org.literacybridge.authoring.schema.Hyperlink;
		import mx.events.CloseEvent;
		import org.literacybridge.authoring.schema.actions.Action;
		import mx.collections.ArrayCollection;
		
		// interface to parent 
		[Bindable] public var contentFile:ContentFile = null;
		
		[Bindable] private var typeCol:ArrayCollection = null;			
		
		[Bindable] private var type:int;
		[Bindable] private var startPos:int;
		[Bindable] private var endPos:int;
		
		
		private function init():void {
			typeCol = new ArrayCollection();
			typeCol.addItem(Action.Goto);
			typeCol.addItem(Action.CallBlock);
			
		}
		
		private function displayTypeLabels(item:Object):String {
			return Action.getActionNameForActionID(item as int);
		}
		
		private function onOk():void {
			// create new hyperlink
			if (contentFile != null) {
				var newHyperlink:Hyperlink = new Hyperlink();
				newHyperlink.parent = contentFile;
				newHyperlink.start = parseInt(startPosTextField.text) as int;
				newHyperlink.end = parseInt(endPosTextField.text) as int;
				var newName:String = nameTextField.text;
				var newAction:Action = null;
				// create new Action
				if (typeCombo.selectedItem == Action.Goto) {
					var newGotoAction:GotoAction = new GotoAction();
					newGotoAction.containerName = newName;
					newAction = newGotoAction;
				} else {
					// Callblock
					var newCallBlockAction:CallBlockAction = new CallBlockAction();
					newCallBlockAction.blockName = newName;
					newCallBlockAction.returnRewindSeconds = parseInt(returnRewindSecondsTextInput.text) as int;
					newAction = newCallBlockAction;			
				}
				newHyperlink.action = newAction;
				
				// validate data before adding them to hyperlink collection
				if (validateInput(newHyperlink, newName)) {
					contentFile.hyperlinks.addItem(newHyperlink);
					close();	
				}
			}
		}
		
		private function onCancel():void {
			close();
		}
		
		private function close():void {
			currentState = '';
			PopUpManager.removePopUp(this);
		}
		
		private function onTypeChanged(event:Event):void {
			var curSel:int = event.currentTarget.selectedItem as int;
			switchState(curSel);
		}
		
		private function switchState(stateId:int):void {
			switch (stateId) {
				case Action.CallBlock:
					currentState = 'CallBlockState';
				break;
				case Action.Goto:
				default:
					currentState = '';
					
			}
		}
		
		private function validateInput(newHyperlink:Hyperlink, name:String, quit:Boolean=false):Boolean {
			var isOK:Boolean = true;
			var messageText:String = '';
			if (newHyperlink.action == null) {
				messageText = "Internal error: Hyperlink has no action!";
				isOK = false;				
			}
			
			// try to set name
			if (isOK) {
				var hyperlinkVisitor:HyperlinkNameVisitor = new HyperlinkNameVisitor(contentFile.hyperlinks);
				if (!hyperlinkVisitor.setActionName(newHyperlink.action, name)) {	// action must exists
					messageText = "Hyperlink name '" + name + "' does already exist.";
					isOK = false;
				}
			}
			
			// check for ranges clashes
			if (isOK) {
				if (!HyperlinkChecker.checkForRangeClashes(contentFile.hyperlinks, newHyperlink)) {
					messageText = "Range clashes with range of an already existing hyperlink";
					isOK = false;
				}
			}
		
			if (!isOK && !quit) {
				Alert.show(messageText, "Error", Alert.OK, this);	
			}
			 
			return isOK;	
		}
		 
		]]>
</mx:Script>
	
	
<mx:VBox width="100%" height="100%" id="mainBox">
	<mx:HBox>
		<mx:Label text="Type:" id="typeLabel" width="88" height="25"/>
		<mx:ComboBox id="typeCombo" labelFunction="displayTypeLabels" change="onTypeChanged(event)" dataProvider="{typeCol}" width="100%" height="100%" />	
	</mx:HBox>
	<mx:HBox>
		<mx:Label text="Name:" id="nameLabel" width="88" height="23"/>
		<mx:TextInput id="nameTextField" width="100%" />
	</mx:HBox>
	<mx:HBox>
		<mx:Label text="Start (in ms)" id="startLabel" width="88" height="23"/>
		<mx:TextInput id="startPosTextField" width="100%" restrict="0123456789" />
	</mx:HBox>
	<mx:HBox id="endPosBox">
		<mx:Label text="End (in ms)" id="endLabel" width="88"/>
		<mx:TextInput id="endPosTextField" width="100%" restrict="0123456789" />
	</mx:HBox>	
	<mx:HBox>
		<mx:Button id="okButton" label="OK" click="onOk()" />
		<mx:Button id="cancelButton" label="Cancel" click="onCancel()" />
	</mx:HBox>		
</mx:VBox>	
	
</mx:TitleWindow>
