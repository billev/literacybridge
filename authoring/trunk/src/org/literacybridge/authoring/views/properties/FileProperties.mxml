<?xml version="1.0" encoding="utf-8"?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:properties="org.literacybridge.authoring.views.properties.*"
	initialize="init()">
	<mx:Script>
		<![CDATA[
			import org.literacybridge.authoring.events.SchemaUpdateEvent;
			import org.literacybridge.authoring.schema.actions.CallBlockAction;
			import com.asfusion.mate.actions.CallBack;
			import org.literacybridge.authoring.schema.helper.HyperlinkUtil;
			import mx.managers.PopUpManager;
			import org.literacybridge.authoring.schema.actions.GotoAction;
			import mx.events.DataGridEvent;
			import mx.controls.dataGridClasses.DataGridColumn;
			import org.literacybridge.authoring.schema.Hyperlink;
			import org.literacybridge.authoring.schema.actions.Action;
			import org.literacybridge.authoring.schema.helper.HyperlinkNameVisitor;
			import org.literacybridge.authoring.schema.ContentFile;
			
			[Bindable] public var contentFile:ContentFile;		

			private function init():void {
				if (contentFile.hyperlinks.length != 0) {
					hyperlinkDataGrid.selectedIndex = 0;	// pre-select first element
				}
			}
			

			private function onChange():void {
				contentFile.label = fileName.text;
			}
				
			private function displayActionName(item:Object, col:DataGridColumn):String {
				return getObjectName(item);
			}
			
			private function getObjectName(item:Object) : String {
				var nameVisitor:HyperlinkNameVisitor = new HyperlinkNameVisitor();
				var label:String = new String();
				try {
					label = nameVisitor.getActionName((item as Hyperlink).action);
				} catch (e:Error) {
					label = e.message;
				}		
				return label;
			}
			
			private function displayTypeName(item:Object, col:DataGridColumn):String {
				if (item is Hyperlink) {
					if ((item as Hyperlink).action is GotoAction) {
						return "G"
					} else if ((item as Hyperlink).action is CallBlockAction) {
						return "C";
					} else {
						// nothing
					}					
				}
				return "?"; // should never be reached
			}
				
			private function addNewHyperlink():void {
				var hyperlinkDialog:HyperlinkDialog = HyperlinkDialog(PopUpManager.createPopUp(this, HyperlinkDialog, true));
				hyperlinkDialog.contentFile = contentFile;
				PopUpManager.centerPopUp(hyperlinkDialog);
			}
			
			private function removeSelectedHyperlink():void {
				var curSel:int = hyperlinkDataGrid.selectedIndex;
				if (curSel != -1) {
					contentFile.hyperlinks.removeItemAt(curSel);
					/*
					if (contentFile.hyperlinks.length != 0) {
						if (curSel == 0) {
							hyperlinkDataGrid.selectedIndex = curSel;
						} else {
							hyperlinkDataGrid.selectedIndex = curSel-1;
						}
					}
					*/
				}
			}
			
			private function enableControls():void {
				removeHyperlinkButton.enabled = (hyperlinkDataGrid.selectedIndex != -1);
			}
			
			private function buildToolTip(item:Object):String {
				if (item is Hyperlink) {
					var action:Action = (item as Hyperlink).action;
					// type name
					var typeName:String = Action.getActionNameForActionID(Action.getActionConstant(action));
					// get name 
					var name:String = getObjectName(item);
	
					return typeName + "-Action: '" + name + "'";					
				}
				return "Error - Type unknown";				
			}  
			
			private function displayReturnRewindSeconds(item:Object, col:DataGridColumn):String {
				if (item is Hyperlink) {
					var hyperlink:Hyperlink = item as Hyperlink;
					if (hyperlink.action is CallBlockAction) {
						var callBlockAction:CallBlockAction = hyperlink.action as CallBlockAction;
						return new String(callBlockAction.returnRewindSeconds);
					}
				}
				return "-";
			}
			
			private function disableEditing(event:DataGridEvent):void {
				if (event.columnIndex == 4) {	// returnRewindSeconds column
					if (event.currentTarget as DataGrid) {
						var dataGrid:DataGrid = event.currentTarget as DataGrid;
						if (dataGrid.selectedItem is Hyperlink) {
							var hyperlink:Hyperlink = dataGrid.selectedItem as Hyperlink;
							if (!(hyperlink.action is CallBlockAction))	{
								event.preventDefault();
							}
						}
					}					
				}
			}
			
			private function itemEditEnd(event:DataGridEvent):void {
				// Get the new data value from the editor.
                var newData:String = TextInput(event.currentTarget.itemEditorInstance).text;
                // Get the current data object
                var hyperlink:Hyperlink = (event.currentTarget as DataGrid).selectedItem as Hyperlink;
                if (hyperlink.action is CallBlockAction) {
                	(hyperlink.action as CallBlockAction).returnRewindSeconds = parseInt(newData) as int;
                } 
                dispatchEvent(new SchemaUpdateEvent());
			}
			
			
		]]>
	</mx:Script>

		<mx:Form backgroundAlpha="1.0" width="100%" fontSize="12" height="100%">
		<mx:FormItem label="Name:">
			<mx:TextInput id="fileName" editable="true" text="{contentFile.label}" change="onChange()"/>
		</mx:FormItem>
		<mx:Spacer height="10"/>
		<mx:Label text="Hyperlinks:"/>
		<!-- IMPORTANT: DO NOT ALLOW COLUMN DRAGGING! Some code relies on the column positions -->
		<mx:DataGrid id="hyperlinkDataGrid" 
						draggableColumns="false"
						dataProvider="{contentFile.hyperlinks}"
						height="144" width="100%"
						editable="true"
						dataTipFunction="buildToolTip"
						itemEditBeginning="disableEditing(event)"
						itemEditEnd="itemEditEnd(event)">
			<mx:columns>
				<mx:DataGridColumn id="typeCol" sortable="false" showDataTips="true" editable="false" headerText="Type" labelFunction="displayTypeName"/>
				<mx:DataGridColumn id="nameCol" sortable="false" showDataTips="true" editable="false" headerText="Name" labelFunction="displayActionName"/>
				<mx:DataGridColumn id="startCol" sortable="false" showDataTips="true" headerText="Start" dataField="start"/>
				<mx:DataGridColumn id="endCol" sortable="false" showDataTips="true" headerText="End" dataField="end"/>
				<!--  the returnRewindSeconds column must be ALWAYS at position 4 (index starts at 0) -->
				<mx:DataGridColumn id="rrsCol" sortable="false" showDataTips="true" editable="true" headerText="RRSecs" labelFunction="displayReturnRewindSeconds"/>
			</mx:columns>
		</mx:DataGrid>
		<mx:HBox>
			<mx:Button id="addHyperlinkButton" label="Add" click="addNewHyperlink()"/>
			<mx:Button id="removeHyperlinkButton" label="Remove" click="removeSelectedHyperlink()"/>		
		</mx:HBox>
	</mx:Form>
</mx:HBox>
