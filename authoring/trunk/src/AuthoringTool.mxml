<?xml version="1.0" encoding="utf-8"?>
<mx:WindowedApplication xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:views="org.literacybridge.authoring.views.*"
	layout="absolute"
	applicationComplete="onApplicationComplete()"
	initialize="onInit()"
	showStatusBar="true"
	width="800"
	height="600">

	<mx:Script>
		<![CDATA[
			import org.literacybridge.authoring.schema.ContentPackage;
			import org.literacybridge.authoring.schema.ContentXMLWriter;
			import org.literacybridge.authoring.schema.ContentXMLParser;
			import mx.managers.PopUpManager;
			import org.literacybridge.authoring.views.ApplicationSettingsScreen;
			import org.literacybridge.authoring.events.ExtendedMenuEvent;
			import mx.controls.Tree;
			import mx.events.ListEvent;
			import mx.events.TreeEvent;
			import mx.events.CollectionEvent;
			import org.literacybridge.authoring.config.Settings;
			import mx.resources.ResourceManager;
			
			private var win:ApplicationSettingsScreen;
		
			private function onInit() : void {
				outline.outlineTree.addEventListener(ListEvent.ITEM_CLICK, updateProperties);
			}
			
			private function updateProperties(event:Event) : void {
				var tree:Tree;
				tree = Tree(event.target);
			
				properties.update(tree.selectedItem);
			}
		
			private function onApplicationComplete() : void {
				stage.nativeWindow.addEventListener(Event.CLOSING, windowClosingHandler);
				loadAndApplySettings();
			}
			
			private function windowClosingHandler(event:Event):void {
				Settings.getInstance().saveSettings();
			}
			
			private function loadAndApplySettings():void {
				var settings:Settings = Settings.getInstance();
				settings.loadSettings();
				ResourceManager.getInstance().localeChain = [settings.getLocale()];
			}
			
			private function onMainMenuEvent(event:ExtendedMenuEvent):void {
				switch (event.id) {
					case ExtendedMenuEvent.MENU_PREFERENCES :
						showSettingsScreen();
						break;
					case ExtendedMenuEvent.MENU_OPEN :
						openFileBrowserOpen();
						break;
					case ExtendedMenuEvent.MENU_SAVE :
						save();
						break;
					case ExtendedMenuEvent.MENU_SAVE_AS :
						openFileBrowserSaveAs();
						break;
					case ExtendedMenuEvent.MENU_QUIT :
						onQuit();
						break;
				}
			}

			private function showSettingsScreen() : void {
				win = ApplicationSettingsScreen(PopUpManager.createPopUp(this, ApplicationSettingsScreen, true));
			}

			private var file:File;

			private function save():void {
				var writer:ContentXMLWriter = new ContentXMLWriter();
				writer.write(outline.contents.getItemAt(0) as ContentPackage);
			}

			private function openFileBrowserSaveAs():void {
	            file = new File();  		
				file.addEventListener(Event.SELECT, onFileSelectSaveAs);
				var dialogTitle:String = resourceManager.getString('resources', 'PLAYERCONTROL_FILE_BROWSER_TITLE');
				try {
					file.browseForSave(dialogTitle);	
				} catch (err:Error)	{
					trace("Something went wrong browsing for a file");
					// do s.th. useful
				}
			}

			private function onFileSelectSaveAs(event:Event):void {
	         	var openedFile:File = event.target as File;
	         	file.removeEventListener(Event.COMPLETE, onFileSelectSaveAs);
				var writer:ContentXMLWriter = new ContentXMLWriter();
				var content:ContentPackage = outline.contents.getItemAt(0) as ContentPackage;
				content.packageFile=openedFile;
				writer.write(content);
	        }


			private function openFileBrowserOpen():void {
	            file = new File();  
				var xmlFilter:FileFilter = new FileFilter("XML", "*.xml")		
				file.addEventListener(Event.SELECT, onFileSelectOpen);
				var dialogTitle:String = resourceManager.getString('resources', 'PLAYERCONTROL_FILE_BROWSER_TITLE');
				try {
					file.browseForOpen(dialogTitle, ([xmlFilter]));	
				} catch (err:Error)	{
					trace("Something went wrong browsing for a file");
					// do s.th. useful
				}
			}

			private function onFileSelectOpen(event:Event):void {
	         	var openedFile:File = event.target as File;
	         	file.removeEventListener(Event.COMPLETE, onFileSelectOpen);
				var parser:ContentXMLParser = new ContentXMLParser();
				outline.contents.addItem(parser.parse(openedFile));
	        }
	        
	        private function onQuit():void {
	        	close();
	        }

			
		]]>
	</mx:Script>

	<mx:Metadata>
        [ResourceBundle("resources")]
    </mx:Metadata>

	<mx:VBox width="100%" height="100%">
		<views:ControlBar width="100%"
			mainMenuEvent="onMainMenuEvent(event)"/>

		<mx:HBox width="100%" height="100%">
			<mx:VBox width="30%" height="100%">
				<views:OutlineView id="outline" width="100%"/>
				<views:PropertiesView id="properties"/>
			</mx:VBox>
			<mx:VBox height="100%">
				<views:PlayerControl />
				<views:PlayerControl />
				<views:PlayerControl />
			</mx:VBox>
		</mx:HBox>		
	</mx:VBox>
</mx:WindowedApplication>
