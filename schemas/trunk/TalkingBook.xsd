<?xml version="1.0" encoding="utf-8" ?>
<xs:schema
        version="0.3.0"
        targetNamespace="http://www.literacybridge.org/2008/book"
        elementFormDefault="qualified"
        attributeFormDefault="unqualified"
        xmlns="http://www.literacybridge.org/2008/book"
        xmlns:xs="http://www.w3.org/2001/XMLSchema">


  <!--
================================
Talking Book Meta Data Schema

This is intended as to provide a low-level
description of the content and interactivity
for a talking book. 

The main structural elements are:
Package, File, and Block.  
A Group container will also eventually be implemented.

Each of these elements acts as a container for:
 - A segment of audio content
 - Actions that occur at the start and end of the segment of audio content
 - Actions that occur at entry and exit (which includes jumps into and out of the middle of a block)
 - Button event handlers
 - Child container elements.
 
 Features that may not be implemented by the next milestone are commented out.
-->

  <xs:include schemaLocation ="TalkingBook-Actions.xsd"/>

  <!--
================================
  Content Structural Elements
================================  
-->

  <xs:element name="package">
    <xs:annotation>
      <xs:documentation>
        A collection of content to be loaded into a talking book device. The smallest unit of deployment.
        All container and variable names are local to the package in which they appear.
        The Name attribute must be the same as the filename of the control track (without the file extension).
          These names should also match the name of the directory that directly contains the control track file.
        The Precision attribute is used to allow the device to store start and stop times in an unsigned 2-byte word, 
        with each value representing an additional step of the milliseconds in the value of the Precision attribute.
        For example: @Precision==128 means the device will stop/start/accept context within +/- 64 milliseconds of the declared times.
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="files" minOccurs="1" maxOccurs="1">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="file" minOccurs="1" maxOccurs="unbounded">
                <xs:annotation>
                  <xs:documentation xmlns="http://www.w3.org/1999/xhtml">
                    A single audio file.
                    The Name attribute *must* be the same as the audio filename (without the file extension).
                  </xs:documentation>
                </xs:annotation>
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="label" minOccurs="0" maxOccurs="unbounded">
                      <xs:annotation>
                        <xs:documentation>
                          A label is just a means of referencing a range of time within an audio file.
                          It is used by blocks and hyperlinks.
                          Start and End times are time in milliseconds relative to the start of the parent file.
                          If Start or End is ommitted, the block will start or end on the file boundary.
                        </xs:documentation>
                      </xs:annotation>
                      <xs:complexType>
                        <xs:attributeGroup ref="containerAttributes"/>
                        <xs:attribute name="start" type="xs:unsignedInt" default="0"/>
                        <xs:attribute name="end" type="xs:unsignedInt" use="optional"/>
                      </xs:complexType>
                    </xs:element>
                  </xs:sequence>
                  <xs:attributeGroup ref="containerAttributes"/>
                </xs:complexType>                
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="blocks" minOccurs="1" maxOccurs="1">
          <xs:complexType>
            <xs:sequence>
              <xs:element ref="block" minOccurs="1" maxOccurs="unbounded"/>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xs:element name="hyperlinks" minOccurs="0" maxOccurs="1">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="hyperlink" minOccurs="1" maxOccurs="unbounded">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="from">
                      <xs:complexType>
                        <xs:attribute name="label" type="xs:token" use="required"/>
                      </xs:complexType>
                    </xs:element>
                    <xs:element name="to">
                      <xs:complexType>
                        <xs:attribute name="block" type="xs:token" use="required"/>
                      </xs:complexType>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
            </xs:sequence>
          </xs:complexType>
        </xs:element>
      </xs:sequence>
      <xs:attributeGroup ref="containerAttributes"/>
      <xs:attribute name="version" type="xs:string" use="optional"/>
      <xs:attribute name="precision" use="optional" default="128"/>
    </xs:complexType>
  </xs:element >

  <xs:element name="block">
    <xs:annotation>
      <xs:documentation>
        A block is a set of event handlers that are either associated with a label of audio OR
        just apply to descendent blocks.  Different blocks can use the same audio label.
        See complexType:nextPreviousBlockType for matching Class attribute used in NextBlock and PreviousBlock actions.
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:element name="onEnter" type="actionsEnterExitType" minOccurs="0" maxOccurs="1">
          <xs:annotation>
            <xs:documentation>
              This event fires whenever the block is entered.
              This is the first event to be triggered in a block.
            </xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element name="buttonEvents">
          <xs:complexType>
            <xs:choice minOccurs="0" maxOccurs="unbounded">
              <xs:element name="onButtonClick" type="buttonEventHandlerType">
                <xs:annotation>
                  <xs:documentation>
                    Fires when a button is pressed and held for less than 0.5 seconds.
                  </xs:documentation>
                </xs:annotation>
              </xs:element>
              <xs:element name="onButtonHold" type="buttonEventHandlerType">
                <xs:annotation>
                  <xs:documentation>
                    Fires when a button is pressed and held for 0.5 seconds or more.
                  </xs:documentation>
                </xs:annotation>
              </xs:element>
            </xs:choice>
          </xs:complexType>
        </xs:element>
        <xs:choice minOccurs="0" maxOccurs="1">
          <xs:element ref="block"/>
          <xs:element name="playAudio">
            <xs:complexType>
              <xs:sequence>
                <xs:element name="onBackJump" minOccurs="0">
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element ref="gotoBlock"/>
                    </xs:sequence>
                  </xs:complexType>
                </xs:element>
                <xs:element name="onEnd" type="actionsEndType"/>
              </xs:sequence>
              <xs:attribute name="label" type="xs:token"/>
            </xs:complexType>
          </xs:element>
        </xs:choice>
        <xs:element name="onExit" type="actionsEnterExitType" minOccurs="0" maxOccurs="1">
          <xs:annotation>
            <xs:documentation>
              This event fires whenever the player position leaves this container.
              During normal playback, this event is triggered immediately after the OnFinish event.
            </xs:documentation>
          </xs:annotation>
        </xs:element>
      </xs:sequence>
      <xs:attributeGroup ref="containerAttributes"/>
      <xs:attribute name="class" type="xs:string" use="optional"/>
      <xs:attribute name="suppressHyperlinks" type="xs:boolean" fixed="true" use="optional"/>
    </xs:complexType>
  </xs:element>
  


  <!--
=========================================
  Common Attribute and Element Groups
=========================================
  -->
  <xs:attributeGroup name="containerAttributes">
    <xs:attribute name="name" use="required" type="xs:token"/>
  </xs:attributeGroup>

  <!--
=========================================
  Supprting Event, Definition, and Meta Types
=========================================
-->

  <xs:complexType name="actionsEnterExitType">
    <xs:sequence>
      <xs:element ref="setLight" minOccurs="0" maxOccurs="2">
        <xs:annotation>
          <xs:documentation>
            Two SetLight elements are allowed so that Red and Green can have opposite settings for the same enter/exit event.
          </xs:documentation>
        </xs:annotation>
      </xs:element>        
      <xs:element ref="setVolume" minOccurs="0" maxOccurs="1"/>        
      <xs:element ref="setSpeed" minOccurs="0" maxOccurs="1"/>
      <xs:element ref="setUSBMode" minOccurs="0" maxOccurs="1">
        <xs:annotation>
          <xs:documentation>
            If SetUSBMode's Active attribute is TRUE, a SetLight actions will be ignored.  
            If SetUSBMode's Active attribute is FALSE, the SetLight actions.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element ref="return" minOccurs="0" maxOccurs="1">
       <xs:annotation>
         <xs:documentation>
           When present in an exit action and when the stack is not empty, the device will
           ignore the action causing it to exit and will return to the block identified on the top of the stack.
         </xs:documentation>
       </xs:annotation> 
      </xs:element>
    </xs:sequence >
  </xs:complexType>

  <xs:complexType name="actionsEndType">
    <xs:sequence>
      <xs:element ref="return" minOccurs="0" maxOccurs="1">
        <xs:annotation>
          <xs:documentation>
            Documentation for the behavior of this event/action pair will be posted on the wiki with a URL inserted here.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element ref="insertSound" minOccurs="0" maxOccurs="1">
        <xs:annotation>
          <xs:documentation>
            Documentation for the behavior of this event/action pair will be posted on the wiki with a URL inserted here.
          </xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:choice minOccurs="1" maxOccurs="1">
        <xs:element ref="stop">
          <xs:annotation>
            <xs:documentation>
              Documentation for the behavior of this event/action pair will be posted on the wiki with a URL inserted here.
            </xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element ref="pause">
          <xs:annotation>
            <xs:documentation>
              Documentation for the behavior of this event/action pair will be posted on the wiki with a URL inserted here.
            </xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element ref="gotoBlock">
          <xs:annotation>
            <xs:documentation>
              Documentation for the behavior of this event/action pair will be posted on the wiki with a URL inserted here.
            </xs:documentation>
          </xs:annotation>
        </xs:element>
        <xs:element ref="loadPackage"/>
      </xs:choice>    
    </xs:sequence>
  </xs:complexType>
  
  <xs:complexType name="buttonEventHandlerType">
    <xs:sequence>
      <xs:element ref="return" minOccurs="0" maxOccurs="1"/>  
      <xs:element ref="insertSound" minOccurs="0" maxOccurs="1"/>
      <xs:choice minOccurs="0" maxOccurs="1">
        <xs:element ref="playPause"/>  
        <xs:element ref="pause"/>  
        <xs:element ref="stop"/>  
        <xs:element ref="loadPackage"/>
        <xs:element ref="gotoBlock"/>  
        <xs:element ref="callBlock"/>  
        <xs:element ref="nextBlock"/>
        <xs:element ref="previousBlock"/>
        <xs:element ref="relativeTimeJump"/>
        <xs:element ref="setVolume"/>  
        <xs:element ref="setLight"/> 
        <xs:element ref="setSpeed"/> 
        <xs:element ref="setUSBMode"/>
      </xs:choice>
    </xs:sequence>
    <xs:attribute name="button" use="required" type="buttonType"/>
 </xs:complexType>


  <!--
=========================================
  Supporting Simple Types
=========================================
-->
  <xs:simpleType name="buttonType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="playPause">
        <xs:annotation>
          <xs:documentation>
            This event should probably be configured to be hidden from standard use of the authoring application.
          </xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="plus">
        <xs:annotation>
          <xs:documentation>
            This event should probably be configured to be hidden from standard use of the authoring application.
          </xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="minus">
        <xs:annotation>
          <xs:documentation>
            This event should probably be configured to be hidden from standard use of the authoring application.
          </xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="left"/>
      <xs:enumeration value="right"/>
      <xs:enumeration value="up"/>
      <xs:enumeration value="down"/>
      <xs:enumeration value="select"/>
      <xs:enumeration value="star"/>
      <xs:enumeration value="home">
        <xs:annotation>
          <xs:documentation>
            This event should probably be configured to be hidden from standard use of the authoring application.
            We will soon want to introduce help content that is package-specific.  Since the Home button will be used for
            both "help options" and "home positioning", we will need to come up with a way user content can insert its
            own help info while not completely overriding the system package's feature that allows the user to ultimately
            get back to the main menu.  None of this functionality is required for the January 2009 pilot.
          </xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>

</xs:schema>
